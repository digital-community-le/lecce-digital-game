@import url("https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;800&family=Press+Start+2P&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* LDC 8-bit Palette (adapted) */
  /* Primary: magenta */
  --ldc-primary: #BD1F76; /* colore primario */
  --ldc-primary-dark: #7A144D; /* variante scura (ombra) */
  --ldc-primary-light: #F28DA3; /* variante chiara (highlight) */

  /* Secondary: blu */
  --ldc-secondary: #2D2E82; /* colore secondario */
  --ldc-secondary-dark: #1A1A4D; /* variante scura (ombra) */
  --ldc-secondary-light: #6B3E8A; /* variante chiara (highlight) */

  /* Accent & complementary */
  --ldc-accent: #F25D27; /* arancione per accenti */
  --ldc-contrast-yellow: #F2C641; /* giallo caldo di contrasto */
  --ldc-info: #41A6F2; /* blu complementare acceso */
  --ldc-rpg-green: #2F8C2F; /* verde brillante RPG */

  /* Neutral / UI surfaces */
  --ldc-background: #E0E0E0; /* grigio chiaro neutro */
  --ldc-surface: #2b1624; /* dark plum, coherent with the magenta primary but less attention-grabbing */
  --ldc-on-background: #000000;
  --ldc-on-surface: #E0E0E0;

  /* Status colors */
  --ldc-error: #ff3366; /* keep existing red for errors */
  --ldc-success: var(--ldc-rpg-green);

  /* Border tuned to dark-plum surface for subtle separation */
  --ldc-border: rgba(43, 22, 36, 0.18);
  /* Surface shadow used for elevated elements (cards, modals) */
  --ldc-surface-shadow: 0 6px 18px rgba(43, 22, 36, 0.28);
  --ldc-elevated-border: rgba(255, 255, 255, 0.04);
  --ldc-focus: var(--ldc-primary-light);

  /* Semantic tokens */
  --background: var(--ldc-background);
  --foreground: var(--ldc-on-background);
  --card: var(--ldc-surface);
  --card-foreground: var(--ldc-on-surface);
  --primary: var(--ldc-primary);
  --primary-foreground: var(--ldc-surface);
  --secondary: var(--ldc-secondary);
  --secondary-foreground: var(--ldc-surface);
  --muted: hsl(0, 0%, 96%);
  --muted-foreground: hsl(0, 0%, 45%);
  --accent: var(--ldc-accent);
  --accent-foreground: var(--ldc-surface);
  --destructive: var(--ldc-error);
  --destructive-foreground: var(--ldc-surface);
  --border: var(--ldc-border);
  --input: var(--ldc-surface);
  --ring: var(--ldc-focus);
  --radius: 0px;

  /* Typography */
  --ldc-font-title: 'Press Start 2P', cursive;
  --ldc-font-body: 'Nunito', system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial;
  --font-retro: var(--ldc-font-title);
  --font-sans: var(--ldc-font-body);

  /* Transitions */
  --ldc-transition-fast: 240ms;
  --ldc-transition-medium: 420ms;
  --ldc-transition-slow: 680ms;

  /* Header */
  --ldc-header-height: 56px;
  
  /* Colori terrain migliorati per mappa più vivace */
  --terrain-grass-base: #32cd32;
  --terrain-grass-detail: #228b22;
  --terrain-grass-flower: #ffff99;
  --terrain-forest-base: #1a5d1a;
  --terrain-forest-undergrowth: #0d4a0d;
  --terrain-forest-tree: #228b22;
  --terrain-mountain-base: #708090;
  --terrain-mountain-rock: #556b6b;
  --terrain-mountain-snow: #f0f8ff;
  --terrain-water-surface: #4682b4;
  --terrain-water-deep: #1e3a8a;
  --terrain-water-shimmer: #87ceeb;
  --terrain-road-main: #8b6914;
  --terrain-road-border: #654321;
  --terrain-road-foundation: #4a3c1a;
}

/* Dark theme overrides */
.ldc-theme--dark {
  --ldc-background: #0b0b0b;
  --ldc-surface: #2b1624; /* dark plum for dark theme surfaces to match palette */
  --ldc-on-background: #f7f7f7;
  --ldc-on-surface: #f7f7f7;
  /* Dark theme: lighter plum-tinted borders to match surface while keeping contrast */
  --ldc-border: rgba(189, 31, 118, 0.10);
  --ldc-surface-shadow: 0 6px 18px rgba(0,0,0,0.6);
  --ldc-elevated-border: rgba(255,255,255,0.06);

  /* Full palette overrides for dark theme */
  --ldc-primary: #9c4b8a; /* brighter on dark */
  --ldc-primary-dark: #5b1450; /* maintain contrast for shadows */
  --ldc-secondary: #5a3b98;
  --ldc-accent: #ff7abf;
  --ldc-error: #ff6978;
  --ldc-success: #1fb65a;
  --ldc-success-dark: #0e7a34;
  --ldc-warning: #f0b000;
  --ldc-warning-dark: #b07f00;
  --ldc-neutral-dark: rgba(255,255,255,0.12);
  --ldc-focus: #ff7abf;
  
  --background: var(--ldc-background);
  --foreground: var(--ldc-on-background);
  --card: var(--ldc-surface);
  --card-foreground: var(--ldc-on-surface);
}

/* High-contrast theme */
.ldc-theme--high-contrast {
  --ldc-background: #ffffff;
  --ldc-surface: #000000;
  --ldc-on-background: #000000;
  --ldc-on-surface: #ffffff;
  --ldc-primary: #6b1d61; /* più scuro per maggiore contrasto */
  --ldc-accent: #ff4f91; /* evidenza più vivida */
  --ldc-border: #000000;
  
  --background: var(--ldc-background);
  --foreground: var(--ldc-on-background);
  --card: var(--ldc-surface);
  --card-foreground: var(--ldc-on-surface);
}

@layer base {
  * {
    @apply border-border;
    box-sizing: border-box;
  }

  body {
    @apply font-sans antialiased bg-background text-foreground;
    font-family: var(--ldc-font-body);
    line-height: 1.6;
    margin: 0;
    padding: 0;
  }

  h1, h2, h3, .ldc-title {
    font-family: var(--ldc-font-title);
    letter-spacing: 0.02em;
    line-height: 1.4;
  }
}

@layer components {
  /* Custom button styles */
  .nes-btn {
    font-family: var(--ldc-font-title) !important;
    font-size: 12px !important;
  }

  /* NES button raised-bottom effect using pseudo-element ::after. The visible 'raised'
     border is simulated with box-shadow; we provide color-specific shadows per variant. */
  .nes-btn {
    position: relative;
    z-index: 1;
    overflow: visible;
  }

  .nes-btn::after {
    /* default subtle shadow for normal buttons */
    box-shadow: inset -4px -4px rgba(0,0,0,0.3) !important;
  }

  /* When button is pressed reduce the offset to simulate press */
  .nes-btn:active::after {
    box-shadow: inset -4px -4px rgba(0,0,0,0.18) !important;
    bottom: -3px;
  }

  .nes-btn.is-primary {
    background-color: var(--ldc-primary) !important;
    border-color: var(--ldc-primary-dark) !important;
    color: white !important;
  }

  .nes-btn.is-success {
    background-color: var(--ldc-success) !important;
    border-color: var(--ldc-rpg-green) !important;
  }

  .nes-btn.is-warning {
    background-color: var(--ldc-contrast-yellow) !important;
    border-color: var(--ldc-contrast-yellow) !important;
    color: var(--ldc-on-background) !important;
  }

  /* Fix NES input text visibility */
  .nes-input {
    background-color: white !important;
    color: black !important;
    font-family: var(--ldc-font-body) !important;
    font-size: 14px !important;
    padding: 12px !important;
  }

  .nes-input::placeholder {
    color: #666 !important;
    opacity: 1 !important;
  }

  .nes-input:focus {
    background-color: white !important;
    color: black !important;
    outline: none !important;
    box-shadow: inset 0 0 0 2px var(--ldc-primary) !important;
  }

  .nes-input.is-error {
    background-color: #fff5f5 !important;
    border-color: var(--ldc-error) !important;
    color: black !important;
  }

  /* Fix nes.css border-image-repeat issue on Safari/WebKit */
  @media (-webkit-min-device-pixel-ratio: 0) and (min-resolution: 0.001dpcm) {
    .nes-container.is-rounded {
      border-image-repeat: stretch !important;
    }
    
    .nes-btn {
      border-image-repeat: stretch !important;
    }

    .nes-balloon {
      border-image-repeat: stretch;
    }
  }

  /* Header styling */
  .ldc-header {
    height: var(--ldc-header-height);
    background-color: var(--ldc-surface);
    border-bottom: 4px solid var(--ldc-border);
    position: sticky;
    top: 0;
    z-index: 50;
  }

  /* Map styling */
  .fantasy-map {
    background: #87ceeb; /* Sky blue background */
    min-height: calc(100vh - var(--ldc-header-height));
    position: relative;
    overflow: hidden;
  }

  .canvas-map {
    width: 100vw;
    height: calc(100vh - var(--ldc-header-height));
    position: relative;
    overflow: hidden;
  }

  .map-node {
    position: absolute;
    width: 80px;
    height: 80px;
    cursor: pointer;
    transition: transform var(--ldc-transition-fast) steps(4, end);
    z-index: 15;
  }

  .map-node:hover {
    transform: scale(1.1);
  }

  .map-node.completed {
    filter: brightness(1.2) saturate(1.3);
  }

  .map-node.locked {
    filter: grayscale(100%) brightness(0.6);
    cursor: not-allowed;
  }

  /* Avatar on map */
  .player-avatar {
    position: absolute;
    width: 48px;
    height: 48px;
    transition: all var(--ldc-transition-medium) steps(8, end);
    z-index: 20;
    transform: translate(-50%, -50%);
    will-change: top, left;
  }

  .player-avatar.avatar-animating {
    z-index: 25;
    filter: brightness(1.2) drop-shadow(0 0 8px rgba(59, 130, 246, 0.6));
  }

  @keyframes avatar-glow {
    0%, 100% { 
      box-shadow: 0 0 4px rgba(59, 130, 246, 0.4);
    }
    50% { 
      box-shadow: 0 0 16px rgba(59, 130, 246, 0.8);
    }
  }

  .avatar-animating .w-full {
    animation: avatar-glow 1s ease-in-out infinite;
  }

  @keyframes trail-sparkle {
    0% { 
      opacity: 1; 
      transform: scale(1) rotate(0deg); 
    }
    100% { 
      opacity: 0; 
      transform: scale(0.3) rotate(180deg); 
    }
  }

  .avatar-animating .animate-ping {
    animation: trail-sparkle 0.8s ease-out infinite;
  }

  /* Modal and overlay styles */
  .modal-overlay {
    position: fixed;
    inset: 0;
    background-color: hsla(0, 0%, 0%, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 100;
    padding: 1rem;
  }

  .modal-content {
    background-color: var(--ldc-surface);
    max-width: 90vw;
    max-height: 90vh;
    overflow-y: auto;
  box-shadow: var(--ldc-surface-shadow);
  border: 1px solid var(--ldc-elevated-border);
  }

  /* Semantic background utilities: ensure matching foreground color for contrast */
  .bg-card {
  background-color: var(--card);
  color: var(--card-foreground) !important;
  }

  .text-card-foreground {
    color: var(--card-foreground) !important;
  }

  .bg-muted {
  background-color: var(--muted);
  color: var(--muted-foreground) !important;
  }

  .bg-background {
    background-color: var(--background);
    color: var(--foreground) !important;
  }

  /* Make hard-coded tailwind utility classes adapt under theme switching so borders/text remain visible */
  .ldc-theme--dark .border-black,
  .ldc-theme--high-contrast .border-black {
    border-color: var(--ldc-border) !important;
  }

  .ldc-theme--dark .text-black,
  .ldc-theme--high-contrast .text-black {
    color: var(--foreground) !important;
  }

  /* Ensure utility classes that force black text/borders don't produce black-on-black when used inside semantic backgrounds */
  .bg-card .text-black,
  .bg-muted .text-black,
  .bg-background .text-black {
    color: inherit !important; /* inherit from the semantic background's foreground */
  }

  .bg-card .border-black,
  .bg-muted .border-black,
  .bg-background .border-black {
    border-color: var(--ldc-border) !important;
  }

  /* Progress bar custom styling */
  .progress-custom {
    background-color: var(--muted);
    height: 16px;
    border: 2px solid var(--ldc-on-background);
  }

  .progress-fill {
    background-color: var(--ldc-success);
    height: 100%;
    transition: width var(--ldc-transition-medium);
  }

  /* Scanner styles (use CSS Grid to center overlay children instead of absolute positioning) */
  .scanner-overlay {
    position: fixed;
    inset: 0;
    background-color: black;
    z-index: 200;
    /* grid lets the video fill the whole overlay while centering the viewfinder/control stack */
    display: grid;
    grid-template-areas: "overlay";
    place-items: center; /* centers children both horizontally and vertically */
  }

  /* Video fills the overlay grid area (no absolute positioning) */
  .scanner-overlay video {
    grid-area: overlay;
    width: 100%;
    object-fit: cover; /* fill while keeping aspect, crop center */
    object-position: center;
    z-index: 200;
    aspect-ratio: 1/1;
  }

  /* The viewfinder and controls sit on the same grid area and are centered by the grid container
     making translate/absolute centering unnecessary. Use flex inside the viewfinder for inner layout. */
  .scanner-viewfinder {
    position: relative;
    grid-area: overlay;
    width: min(80vmin, 320px);
    height: min(80vmin, 320px);
    border: 4px solid var(--ldc-contrast-yellow);
    border-radius: 8px;
    z-index: 220;
    display: flex;
    align-items: center;
    justify-content: center;
    background: transparent; /* keep video visible behind the viewfinder */
    pointer-events: none; /* allow click-through if needed; controls inside can override */
  }

  /* Toast notifications */
  .toast {
    position: fixed;
    top: calc(var(--ldc-header-height) + 1rem);
    left: 0;
    right: 0;
    display: flex;
    justify-content: center; /* center toast content horizontally */
    z-index: 150;
    pointer-events: none; /* allow clicks to pass through unless children override */
  }
  /* Make NES container based toasts visible and theme-adaptive */
  .toast.nes-container,
  .toast .nes-container {
    pointer-events: auto; /* allow interaction with close button */
    background-color: var(--card); /* semantic surface */
    color: var(--card-foreground) !important;
    box-shadow: var(--ldc-surface-shadow);
    width: min(95%, 680px);
    margin: 0 auto;;
  }

  /* Variant colors (keep readable in themes) */
  .toast.is-success .nes-container,
  .toast.nes-container.is-success {
    background-color: var(--ldc-success);
    color: var(--ldc-on-surface) !important;
    border-color: rgba(0,0,0,0.08) !important;
  }

  .toast.is-error .nes-container,
  .toast.nes-container.is-error {
    background-color: var(--ldc-error);
    color: var(--ldc-on-surface) !important;
    border-color: rgba(0,0,0,0.08) !important;
  }

  .toast.is-warning .nes-container,
  .toast.nes-container.is-warning {
    background-color: var(--ldc-contrast-yellow);
    color: var(--ldc-on-background) !important;
    border-color: rgba(0,0,0,0.04) !important;
  }

  .toast.is-light .nes-container,
  .toast.nes-container.is-light {
    background-color: var(--card);
    color: var(--card-foreground) !important;
  }
}

@layer utilities {
  /* Animation for retro effects */
  @keyframes pixelPop {
    0% { transform: scale(1); }
    50% { transform: scale(1.2); }
    100% { transform: scale(1); }
  }

  .pixel-pop {
    animation: pixelPop var(--ldc-transition-fast) steps(4, end);
  }

  @keyframes fadeInRetro {
    0% { opacity: 0; transform: translateY(8px); }
    100% { opacity: 1; transform: translateY(0); }
  }

  .fade-in-retro {
    animation: fadeInRetro var(--ldc-transition-medium) steps(6, end);
  }

  /* Pixelated images for retro feel */
  .pixelated {
    image-rendering: -moz-crisp-edges;
    image-rendering: -webkit-crisp-edges;
    image-rendering: pixelated;
    image-rendering: crisp-edges;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .ldc-header__title--mobile-hidden {
      display: none;
    }
    
    .map-node {
      width: 60px;
      height: 60px;
    }
    
    .player-avatar {
      width: 36px;
      height: 36px;
    }
  }

  /* Accessibility */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  /* Route transition overlay (fade to black, then reveal) */
  .route-transition-overlay {
    position: fixed;
    inset: 0;
    background-color: #000; /* full black retro wipe */
    pointer-events: none; /* allow interactions when hidden */
    opacity: 0;
    z-index: 9999; /* above modals and scanner */
    will-change: opacity;
  }

  /* When rendered inside the game body we want the overlay to cover only
     the game body (not the header). The overlay inside .game-body will be
     positioned absolute relative to that container. */
  .game-body .route-transition-overlay {
    position: absolute;
    inset: 0;
    z-index: 60; /* above game content but below global modals */
  }

  /* Keyframe based fades ensure the opacity animates predictably across browsers
     and can be stepped for a pixelated feel. Animations use 'forwards' so the
     final opacity is preserved after the animation completes. */
  @keyframes route-fade-in {
    0% { opacity: 0; }
    100% { opacity: 1; }
  }

  @keyframes route-fade-out {
    0% { opacity: 1; }
    100% { opacity: 0; }
  }

  .route-transition-overlay.visible {
    pointer-events: auto; /* block input while visible */
    animation: route-fade-in 1500ms steps(12, end) forwards;
  }

  .route-transition-overlay.hidden {
    pointer-events: none;
    animation: route-fade-out 1500ms steps(12, end) forwards;
  }

  /* Pixelated and scanline visual for retro wipe */
  .route-transition-overlay.pixel {
    /* Use a CSS image-rendering trick and a layered background to simulate scanlines */
    image-rendering: pixelated;
    background-image: linear-gradient(rgba(0,0,0,0.85), rgba(0,0,0,0.85)),
                      repeating-linear-gradient(transparent 0 2px, rgba(0,0,0,0.08) 2px 4px);
    background-blend-mode: normal;
    backdrop-filter: contrast(0.9) saturate(0.9);
  }

  /* Make the fade use stepped timing to feel more 'pixel' */
  .route-transition-overlay.visible {
    opacity: 1;
    pointer-events: auto;
    transition: opacity 1500ms steps(8, end);
  }

  .route-transition-overlay.hidden {
    opacity: 0;
    transition: opacity 1500ms steps(8, end);
  }

  /* Optional stronger scanline variant when we want a pronounced retro effect */
  .route-transition-overlay.pixel.scan-strong {
    /* Stronger scanlines and a subtle pixel grid overlay for chunky pixels */
    background-image:
      linear-gradient(rgba(0,0,0,0.95), rgba(0,0,0,0.95)),
      repeating-linear-gradient(transparent 0 3px, rgba(0,0,0,0.14) 3px 6px),
      radial-gradient(circle at 10% 10%, rgba(255,255,255,0.02) 1px, transparent 1px);
    background-blend-mode: normal, normal, overlay;
    image-rendering: pixelated;
  }

  /* Terrain Tiles for Retro Map */
  .terrain-grid {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 1;
  }

  .terrain-tile {
    position: absolute;
    transition: opacity 0.3s ease;
  }

  /* Grass tiles (default background) */
  .terrain-grass {
    background: 
      radial-gradient(circle at 20% 20%, #4ade80 2px, transparent 2px),
      radial-gradient(circle at 60% 80%, #22c55e 1px, transparent 1px),
      linear-gradient(0deg, #16a34a 0%, #22c55e 50%, #4ade80 100%);
    background-size: 16px 16px, 12px 12px, 100% 100%;
    opacity: 1;
  }

  /* Forest tiles */
  .terrain-forest {
    background: 
      radial-gradient(circle at 30% 30%, #166534 3px, transparent 3px),
      radial-gradient(circle at 70% 70%, #15803d 2px, transparent 2px),
      radial-gradient(circle at 50% 50%, #22c55e 1px, transparent 1px),
      linear-gradient(45deg, #052e16 0%, #166534 50%, #15803d 100%);
    background-size: 20px 20px, 16px 16px, 8px 8px, 100% 100%;
    opacity: 1;
  }

  /* Mountain tiles */
  .terrain-mountain {
    background: 
      linear-gradient(45deg, #6b7280 25%, transparent 25%),
      linear-gradient(-45deg, #6b7280 25%, transparent 25%),
      linear-gradient(45deg, transparent 75%, #374151 75%),
      linear-gradient(-45deg, transparent 75%, #374151 75%),
      linear-gradient(0deg, #9ca3af 0%, #6b7280 50%, #374151 100%);
    background-size: 16px 16px, 16px 16px, 16px 16px, 16px 16px, 100% 100%;
    background-position: 0 0, 0 8px, 8px -8px, -8px 0px, 0 0;
    opacity: 1;
  }

  /* Lake tiles */
  .terrain-lake {
    background: 
      radial-gradient(circle at 25% 25%, #3b82f6 2px, transparent 2px),
      radial-gradient(circle at 75% 75%, #1d4ed8 1px, transparent 1px),
      linear-gradient(45deg, #1e40af 0%, #3b82f6 50%, #60a5fa 100%);
    background-size: 24px 24px, 16px 16px, 100% 100%;
    opacity: 1;
    animation: water-shimmer 4s ease-in-out infinite;
  }

  @keyframes water-shimmer {
    0%, 100% { opacity: 0.7; }
    50% { opacity: 0.9; }
  }

  /* Road path styling */
  .road-segment {
    z-index: 5;
  }

  /* Channel content layout */
  .challenge-content-layout {
      .challenge-description {
      background-color: var(--ldc-secondary);
      color: var(--ldc-on-surface);
    }
  }

  /* Pixel-perfect retro game animations for CompletionModal */
  @keyframes gemZoomIn {
    0% {
      transform: scale(0) rotate(0deg);
      opacity: 0;
    }
    50% {
      transform: scale(1.2) rotate(180deg);
      opacity: 0.8;
    }
    75% {
      transform: scale(0.9) rotate(270deg);
      opacity: 1;
    }
    100% {
      transform: scale(1) rotate(360deg);
      opacity: 1;
    }
  }

  @keyframes epicSealEntry {
    0% {
      transform: scale(0) rotate(180deg);
      opacity: 0;
      filter: drop-shadow(0 0 0 rgba(255, 215, 0, 0));
    }
    30% {
      transform: scale(0.8) rotate(90deg);
      opacity: 0.6;
      filter: drop-shadow(0 0 15px rgba(255, 215, 0, 0.4));
    }
    70% {
      transform: scale(1.1) rotate(-10deg);
      opacity: 0.9;
      filter: drop-shadow(0 0 25px rgba(255, 215, 0, 0.7));
    }
    100% {
      transform: scale(1) rotate(0deg);
      opacity: 1;
      filter: drop-shadow(0 0 30px rgba(255, 215, 0, 0.8));
    }
  }

  @keyframes gemGlow {
    0% {
      filter: drop-shadow(0 0 30px rgba(255, 215, 0, 0.8)) drop-shadow(0 0 60px rgba(255, 255, 255, 0.4));
    }
    100% {
      filter: drop-shadow(0 0 40px rgba(255, 215, 0, 1)) drop-shadow(0 0 80px rgba(255, 255, 255, 0.6));
    }
  }

  @keyframes titlePulse {
    0%, 100% {
      text-shadow: 3px 3px 0px rgba(0,0,0,0.8), 0 0 20px rgba(255, 215, 0, 0.6);
    }
    50% {
      text-shadow: 3px 3px 0px rgba(0,0,0,0.8), 0 0 30px rgba(255, 215, 0, 0.9);
    }
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-20px);
    }
  }

  /* Pixelated rendering for retro assets */
  .pixelated {
    image-rendering: pixelated;
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
  }

  /* Retro glow effects */
  .retro-glow {
    filter: drop-shadow(0 0 10px currentColor);
  }

  .retro-border {
    border-image: 
      linear-gradient(45deg, 
        transparent 30%, 
        currentColor 30%, 
        currentColor 70%, 
        transparent 70%
      ) 1;
  }
}
