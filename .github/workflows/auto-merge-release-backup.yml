name: Auto-merge Release PR

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write

jobs:
  auto-merge-release-pr:
    # Solo per PR create da release-please E se c'√® il commento di validazione
    if: |
      (
        (github.event_name == 'pull_request' &&
         startsWith(github.event.pull_request.title, 'chore') && 
         contains(github.event.pull_request.title, 'release') &&
         github.event.pull_request.user.login == 'github-actions[bot]')
      ) ||
      (
        (github.event_name == 'issue_comment' &&
         github.event.issue.pull_request &&
         contains(github.event.comment.body, '‚úÖ **Pre-validation passed**') &&
         github.event.comment.user.login == 'github-actions[bot]')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Get PR number
        id: get-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let prNumber;
            
            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
            } else if (context.eventName === 'issue_comment') {
              prNumber = context.payload.issue.number;
            }
            
            core.setOutput('pr_number', prNumber);
            
            // Verifica che sia una PR di release
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            const isReleasePR = pr.title.startsWith('chore') && 
                               pr.title.includes('release') &&
                               pr.user.login === 'github-actions[bot]';
            
            core.setOutput('is_release_pr', isReleasePR);
            
            if (!isReleasePR) {
              console.log('Not a release PR, skipping auto-merge');
              core.setOutput('should_continue', false);
            } else {
              core.setOutput('should_continue', true);
            }

      - name: Check if ready for auto-merge
        if: steps.get-pr.outputs.should_continue == 'true'
        id: check-ready
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.get-pr.outputs.pr_number }};
            
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            // Controlla se ci sono commenti che indicano validazione passata
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const validationPassed = comments.some(comment => 
              comment.body.includes('‚úÖ **Pre-validation passed**')
            );

            const validationFailed = comments.some(comment => 
              comment.body.includes('‚ö†Ô∏è **Pre-validation failed**')
            );

            console.log(`PR #${prNumber} mergeable: ${pr.mergeable}`);
            console.log(`Validation passed: ${validationPassed}`);
            console.log(`Validation failed: ${validationFailed}`);

            const ready = pr.mergeable && validationPassed && !validationFailed;
            
            core.setOutput('ready', ready);
            core.setOutput('mergeable', pr.mergeable);
            core.setOutput('validation_passed', validationPassed);
            core.setOutput('pr_number', prNumber);      - name: Wait for checks to complete
        if: steps.check-ready.outputs.ready == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Attendi che eventuali check si completino
            await new Promise(resolve => setTimeout(resolve, 30000)); // 30 secondi

            // Re-check lo stato
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            if (!pr.mergeable) {
              core.setFailed('PR is not in a mergeable state');
            }

      - name: Auto-approve release PR
        if: steps.check-ready.outputs.ready == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Approva la PR
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              event: 'APPROVE',
              body: 'ü§ñ Auto-approved by Release workflow - Pre-validation passed'
            });

            console.log(`‚úÖ PR #${context.payload.pull_request.number} approved automatically`);

      - name: Enable auto-merge
        if: steps.check-ready.outputs.ready == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Enable auto-merge con squash
              await github.rest.pulls.enableAutoMerge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                merge_method: 'squash'
              });

              console.log(`‚úÖ Auto-merge enabled for PR #${context.payload.pull_request.number}`);
              
              // Commenta il successo
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `ü§ñ **Auto-merge enabled**
                
                ‚úÖ Pre-validation passed
                ‚úÖ PR approved automatically  
                ‚úÖ Auto-merge configured with squash method
                
                This PR will be merged automatically when all checks pass.
                Once merged, the deployment pipeline will start automatically.`
              });

            } catch (error) {
              console.error('‚ùå Failed to enable auto-merge:', error.message);
              
              // Fallback: try direct merge
              console.log('Attempting direct merge as fallback...');
              
              try {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  merge_method: 'squash',
                  commit_title: `üöÄ Release: Auto-merge PR #${context.payload.pull_request.number}`,
                  commit_message: 'Automatically merged by Release workflow'
                });

                console.log(`‚úÖ PR #${context.payload.pull_request.number} merged via direct merge`);
              } catch (mergeError) {
                core.setFailed(`Both auto-merge and direct merge failed: ${mergeError.message}`);
              }
            }

      - name: Comment if not ready
        if: steps.check-ready.outputs.ready != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const mergeable = '${{ steps.check-ready.outputs.mergeable }}' === 'true';
            const validationPassed = '${{ steps.check-ready.outputs.validation_passed }}' === 'true';

            let reason = [];
            if (!mergeable) reason.push('PR is not in mergeable state');
            if (!validationPassed) reason.push('Pre-validation has not passed');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `‚è≥ **Auto-merge not ready**
              
              **Reasons:**
              ${reason.map(r => `- ‚ùå ${r}`).join('\n')}
              
              **What happens next:**
              - This workflow will retry when PR is updated
              - Once ready, auto-merge will be enabled automatically
              - You can also merge manually if needed`
            });
