name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write
  statuses: write

jobs:
  # Pre-validation veloce per commit che potrebbero creare release
  pre-validation:
    if: |
      contains(github.event.head_commit.message, 'feat:') || 
      contains(github.event.head_commit.message, 'fix:') || 
      contains(github.event.head_commit.message, 'BREAKING CHANGE:')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Quick validation before release
        run: |
          npm run check
          npm run test:smart

  release-please:
    needs: [pre-validation]
    # Esegue sempre, ma ha info su pre-validation
    if: always()
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      pr_created: ${{ steps.release.outputs.pr_created }}
      pr_number: ${{ steps.release.outputs.pr_number }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      patch: ${{ steps.release.outputs.patch }}
      sha: ${{ steps.release.outputs.sha }}
      upload_url: ${{ steps.release.outputs.upload_url }}
      html_url: ${{ steps.release.outputs.html_url }}
      draft: ${{ steps.release.outputs.draft }}
      body: ${{ steps.release.outputs.body }}
      pre_validation_passed: ${{ needs.pre-validation.result == 'success' || needs.pre-validation.result == 'skipped' }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: node
          token: ${{ secrets.GITHUB_TOKEN }}

  # Nuovo job: Auto-merge della PR di release
  auto-merge-release:
    needs: [release-please]
    if: |
      needs.release-please.outputs.pr_created == 'true' &&
      needs.release-please.outputs.pre_validation_passed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-approve release PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.release-please.outputs.pr_number }}
            });

            // Approva la PR
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.release-please.outputs.pr_number }},
              event: 'APPROVE',
              body: 'ü§ñ Auto-approved by Release Please workflow'
            });

            console.log(`‚úÖ PR #${pr.number} approved automatically`);

      - name: Auto-merge release PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Attendi un momento per assicurarsi che l'approval sia processato
            await new Promise(resolve => setTimeout(resolve, 2000));

            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ needs.release-please.outputs.pr_number }},
                merge_method: 'squash',
                commit_title: `üöÄ Release: Auto-merge PR #${{ needs.release-please.outputs.pr_number }}`,
                commit_message: 'Automatically merged by Release Please workflow'
              });

              console.log(`‚úÖ PR #${{ needs.release-please.outputs.pr_number }} merged automatically`);
            } catch (error) {
              console.error('‚ùå Failed to auto-merge:', error.message);
              core.setFailed(`Auto-merge failed: ${error.message}`);
            }

  # Nuovo job: Verifica e documenta release creata
  release-info:
    needs: [release-please]
    if: needs.release-please.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Display release information
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release = {
              version: '${{ needs.release-please.outputs.version }}',
              tag_name: '${{ needs.release-please.outputs.tag_name }}',
              html_url: '${{ needs.release-please.outputs.html_url }}',
              upload_url: '${{ needs.release-please.outputs.upload_url }}',
              sha: '${{ needs.release-please.outputs.sha }}',
              draft: '${{ needs.release-please.outputs.draft }}'
            };

            console.log('üéâ Release Created Successfully!');
            console.log('üìã Release Information:');
            console.log(`   Version: ${release.version}`);
            console.log(`   Tag: ${release.tag_name}`);
            console.log(`   URL: ${release.html_url}`);
            console.log(`   SHA: ${release.sha}`);
            console.log(`   Draft: ${release.draft}`);

            // Verifica che il tag sia stato creato
            try {
              const { data: tag } = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${release.tag_name}`
              });
              console.log(`‚úÖ Tag ${release.tag_name} verified in repository`);
              console.log(`   Tag SHA: ${tag.object.sha}`);
            } catch (error) {
              console.error(`‚ùå Tag verification failed: ${error.message}`);
            }

            // Verifica le release notes
            try {
              const { data: releaseData } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: release.tag_name
              });
              
              console.log('üìù Release Notes Preview:');
              console.log(releaseData.body.substring(0, 200) + '...');
              
              return {
                tag_created: true,
                release_notes_available: !!releaseData.body,
                release_url: releaseData.html_url
              };
            } catch (error) {
              console.error(`‚ùå Release notes verification failed: ${error.message}`);
              return { tag_created: false, error: error.message };
            }

  # Deploy su release - ora triggerato automaticamente dopo auto-merge
  deploy:
    needs: [release-please]
    if: needs.release-please.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Importante: fetch the latest after auto-merge
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check prerequisites
        run: npm run check:prerequisites

      - name: Run type checking
        run: npm run check

      - name: Run complete test suite (ALL tests for production deploy)
        run: npm run test:run

      - name: Generate comprehensive coverage report
        run: npm run test:coverage

      - name: Build application with version
        run: npm run build:prod

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_LECCE_DIGITAL_LEGENDS }}'
          channelId: live
          projectId: lecce-digital-legends

      - name: Create deployment comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ needs.release-please.outputs.tag_name }}';
            const version = '${{ needs.release-please.outputs.version }}';
            const releaseUrl = '${{ needs.release-please.outputs.html_url }}';
            const deployUrl = 'https://lecce-digital-legends.web.app';

            // Create comprehensive deployment notification
            const deploymentInfo = `üöÄ **Release ${tag} Deployed Successfully!**

            ## üì¶ Deployment Details
            - **Live Application**: [${deployUrl}](${deployUrl})
            - **Release Tag**: [\`${tag}\`](${releaseUrl})
            - **Version**: \`${version}\`
            - **Deployed At**: ${new Date().toISOString()}
            - **Commit SHA**: \`${context.sha.substring(0, 7)}\`

            ## ÔøΩ Release Information  
            - **GitHub Release**: [View Release Notes](${releaseUrl})
            - **Changelog**: Updated automatically with conventional commits
            - **Tag Created**: ‚úÖ \`${tag}\` available in repository

            ## üéâ Status
            ‚úÖ **All systems operational** - Release is live and available to users!

            ---
            *Automated deployment completed via Release Please workflow*`;

            // Post comment on commit
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: deploymentInfo
            });

            // Also log to workflow output
            console.log('üéØ Deployment Summary:');
            console.log(`   Tag: ${tag}`);
            console.log(`   Version: ${version}`);
            console.log(`   Release URL: ${releaseUrl}`);
            console.log(`   Deploy URL: ${deployUrl}`);
            console.log('‚úÖ Notification posted successfully');  # Job di fallback se pre-validation fallisce ma PR √® creata
  release-rollback:
    needs: [release-please]
    if: |
      needs.release-please.outputs.pr_created == 'true' &&
      needs.release-please.outputs.pre_validation_passed == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Notify failed pre-validation
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ needs.release-please.outputs.pr_number }};

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `‚ö†Ô∏è **Auto-merge Blocked**
              
              Pre-validation tests failed for this release PR.
              
              **Action Required:**
              1. üîç Check the pre-validation job logs
              2. üõ†Ô∏è Fix any failing tests
              3. üìù Push fixes to trigger re-validation
              4. ‚úÖ Manual review and merge when ready
              
              This PR will **NOT** be auto-merged until pre-validation passes.`
            });

            core.setFailed('Pre-validation failed - auto-merge blocked');
