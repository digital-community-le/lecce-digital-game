name: Auto-merge Release PR

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write

jobs:
  auto-merge-release-pr:
    # Trigger per PR di release-please (rileva vari formati)
    if: |
      (github.event_name == 'pull_request' &&
       github.event.pull_request.user.login == 'github-actions[bot]' &&
       contains(github.event.pull_request.labels.*.name, 'autorelease: pending')
      ) ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '‚úÖ **Pre-validation passed**') &&
       github.event.comment.user.login == 'github-actions[bot]')
    runs-on: ubuntu-latest
    steps:
      - name: Debug PR Information
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('üîç DEBUG: Auto-merge workflow triggered');
            console.log(`Event: ${context.eventName}`);

            if (context.eventName === 'pull_request') {
              const pr = context.payload.pull_request;
              console.log(`PR #${pr.number}: "${pr.title}"`);
              console.log(`Created by: ${pr.user.login}`);
              console.log(`Head ref: ${pr.head.ref}`);
              console.log(`Base ref: ${pr.base.ref}`);
              console.log(`Draft: ${pr.draft}`);
              console.log(`Mergeable: ${pr.mergeable}`);
              
              // Controlla se ha le label di release-please
              const labels = pr.labels.map(l => l.name);
              console.log(`Labels: ${labels.join(', ')}`);
              
              if (labels.includes('autorelease: pending')) {
                console.log('‚úÖ Detected autorelease: pending label');
              }
            }

      - name: Get PR details
        id: pr-info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Fetch PR number & data depending on trigger
            let prNumber, prData;

            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
              prData = context.payload.pull_request;
            } else if (context.eventName === 'issue_comment') {
              prNumber = context.payload.issue.number;
              const { data } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              prData = data;
            }

            // Defensive: ensure we have PR data
            if (!prData || !prNumber) {
              console.log('‚ùå Could not determine PR data, exiting');
              return { prNumber: prNumber || null, ready: false, reason: 'no_pr_data' };
            }

            // Rilevazione PR di release: usa le stesse condizioni permissive del job-level if
            const labels = (prData.labels || []).map(l => l.name);
            const isReleasePR = prData.user && prData.user.login === 'github-actions[bot]' && (
              prData.title.startsWith('chore') ||
              prData.title.startsWith('release') ||
              prData.title.includes('release') ||
              (prData.head && prData.head.ref && prData.head.ref.startsWith('release-please--')) ||
              labels.includes('autorelease: pending')
            );

            if (!isReleasePR) {
              console.log('‚ùå Not a release PR, skipping auto-merge behavior');
              return { prNumber, ready: false, reason: 'not_release_pr' };
            }

            console.log(`‚úÖ Processing release PR #${prNumber}: ${prData.title}`);

            // Controlla se ci sono commenti che indicano validazione passata
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const validationPassed = comments.some(comment => 
              comment.body && comment.body.includes('‚úÖ **Pre-validation passed**')
            );

            const validationFailed = comments.some(comment => 
              comment.body && comment.body.includes('‚ö†Ô∏è **Pre-validation failed**')
            );

            // Ensure mergeable is resolved (GitHub may return null initially). Poll a few times.
            let mergeable = prData.mergeable;
            const maxAttempts = 6;
            let attempt = 0;
            while ((mergeable === null || mergeable === undefined) && attempt < maxAttempts) {
              attempt++;
              console.log(`üîÅ mergeable is ${mergeable} - re-fetching PR data (attempt ${attempt}/${maxAttempts})`);
              await new Promise(res => setTimeout(res, 3000));
              const { data: refreshed } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              mergeable = refreshed.mergeable;
            }

            console.log(`PR #${prNumber} mergeable: ${mergeable}`);
            console.log(`Validation passed: ${validationPassed}`);
            console.log(`Validation failed: ${validationFailed}`);

            const ready = Boolean(mergeable) && validationPassed && !validationFailed;

            return {
              prNumber,
              ready,
              mergeable: mergeable,
              validationPassed,
              validationFailed,
              title: prData.title
            };

      - name: Wait for checks if needed
        if: fromJSON(steps.pr-info.outputs.result).ready
        run: |
          echo "‚è≥ Waiting 30 seconds for any pending checks to complete..."
          sleep 30

      - name: Auto-approve and merge
        if: fromJSON(steps.pr-info.outputs.result).ready
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prInfo = ${{ steps.pr-info.outputs.result }};
            const prNumber = prInfo.prNumber;

            console.log(`üöÄ Auto-merging PR #${prNumber}...`);

            try {
              // 1. Approva la PR
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'APPROVE',
                body: 'ü§ñ Auto-approved by Release workflow - Pre-validation passed'
              });
              
              console.log(`‚úÖ PR #${prNumber} approved`);

              // 2. Direct merge (simplified approach)
              console.log(`üîÑ Proceeding with direct merge for PR #${prNumber}...`);
              
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash',
                commit_title: `üöÄ Release: ${prInfo.title}`,
                commit_message: 'Automatically merged by Release workflow'
              });

              console.log(`‚úÖ PR #${prNumber} merged successfully`);
              
              // Prova a commentare il successo
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `üöÄ **Release PR merged successfully!**
                  
                  ‚úÖ Pre-validation passed
                  ‚úÖ PR approved and merged automatically
                  ‚úÖ Deployment pipeline will start shortly
                  
                  **Next steps:**
                  - Monitor deployment in the Actions tab
                  - New release will be tagged automatically`
                });
                console.log(`‚úÖ Success comment posted to PR #${prNumber}`);
              } catch (commentError) {
                console.log(`‚ö†Ô∏è Could not post success comment: ${commentError.message}`);
              }
              
            } catch (error) {
              console.error('‚ùå Failed to process release PR:', error.message);
              
              // Prova a commentare l'errore
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `‚ùå **Auto-merge failed**
                  
                  **Error:** ${error.message}
                  
                  **Manual action required:**
                  1. Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details
                  2. Manually review and merge this PR if appropriate
                  3. Consider investigating the auto-merge setup`
                });
                console.log(`‚úÖ Error comment posted to PR #${prNumber}`);
              } catch (commentError) {
                console.log(`‚ö†Ô∏è Could not post error comment: ${commentError.message}`);
              }
              
              core.setFailed(`Auto-merge failed: ${error.message}`);
            }

      - name: Comment if not ready
        if: steps.pr-info.outputs.result && !fromJSON(steps.pr-info.outputs.result).ready
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prInfo = ${{ steps.pr-info.outputs.result }};
            const prNumber = prInfo.prNumber;

            let reasons = [];
            if (!prInfo.mergeable) reasons.push('PR is not in mergeable state');
            if (!prInfo.validationPassed) reasons.push('Pre-validation has not passed yet');
            if (prInfo.validationFailed) reasons.push('Pre-validation failed');

            console.log(`‚è≥ PR #${prNumber} not ready for auto-merge: ${reasons.join(', ')}`);

            // Prova a commentare lo stato di non pronto
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `‚è≥ **Auto-merge not ready**
                
                **Reasons:**
                ${reasons.map(r => `- ‚ùå ${r}`).join('\n')}
                
                **What happens next:**
                - This workflow will retry when PR is updated or commented
                - Once conditions are met, auto-merge will be enabled automatically
                - You can also merge manually if needed
                
                **Troubleshooting:**
                - Check if pre-validation workflow is still running
                - Verify there are no merge conflicts
                - Look for validation failure comments above`
              });
              console.log(`‚úÖ Not ready comment posted to PR #${prNumber}`);
            } catch (commentError) {
              console.log(`‚ö†Ô∏è Could not post not ready comment: ${commentError.message}`);
            }
