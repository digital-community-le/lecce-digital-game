name: Deploy on Release

on:
  # Trigger quando viene mergiata una PR di release
  pull_request:
    types: [closed]
    branches:
      - main

  # Trigger quando viene creato un release tag
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  actions: read
  checks: read
  pull-requests: write
  issues: write

jobs:
  deploy:
    # Solo se PR di release mergiata (automatica o manuale) oppure push di tag
    if: |
      (github.event_name == 'pull_request' && 
       github.event.pull_request.merged == true &&
       (
         (startsWith(github.event.pull_request.title, 'chore') && contains(github.event.pull_request.title, 'release')) ||
         startsWith(github.event.pull_request.head.ref, 'release-please--') ||
         contains(github.event.pull_request.body, 'Release-As:') ||
         github.event.pull_request.user.login == 'github-actions[bot]'
       )) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - name: Log deployment trigger
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const eventType = '${{ github.event_name }}';

            if (eventType === 'pull_request') {
              const pr = context.payload.pull_request;
              const mergedBy = pr.merged_by ? pr.merged_by.login : 'unknown';
              const isBot = pr.user.login === 'github-actions[bot]';
              const mergeMethod = pr.merge_commit_sha ? 'merge commit' : 'unknown';
              
              console.log('🚀 DEPLOYMENT TRIGGERED BY PR MERGE');
              console.log(`📋 PR #${pr.number}: ${pr.title}`);
              console.log(`👤 Created by: ${pr.user.login} ${isBot ? '(bot)' : '(human)'}`);
              console.log(`✅ Merged by: ${mergedBy}`);
              console.log(`🔧 Merge method: ${mergeMethod}`);
              console.log(`📅 Merged at: ${pr.merged_at}`);
              console.log(`🌿 Branch: ${pr.head.ref} → ${pr.base.ref}`);
              
              // Determina se è merge automatico o manuale
              const isAutoMerge = mergedBy === 'github-actions[bot]' || 
                                 mergedBy === pr.user.login;
              
              const mergeType = isAutoMerge ? 'AUTOMATIC' : 'MANUAL';
              console.log(`🤖 Merge type: ${mergeType}`);
              
            } else if (eventType === 'push') {
              console.log('🚀 DEPLOYMENT TRIGGERED BY TAG PUSH');
              console.log(`🏷️ Tag: ${{ github.ref_name }}`);
              console.log(`👤 Pushed by: ${{ github.actor }}`);
            }

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Se è un tag, usa il tag; altrimenti usa main
          ref: ${{ github.event_name == 'push' && github.ref || 'main' }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Verify Firebase Configuration
        run: |
          echo "🔍 Verifying Firebase configuration..."
          if [ ! -f "firebase.json" ]; then
            echo "❌ firebase.json not found"
            exit 1
          fi

          if [ ! -d "dist/public" ]; then
            echo "❌ Build output directory dist/public not found"
            exit 1
          fi

          echo "✅ Firebase configuration OK"
          echo "📁 Build output files:"
          ls -la dist/public/ | head -10

      - name: Check Firebase Secrets
        env:
          FIREBASE_SECRET: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_LECCE_DIGITAL_LEGENDS }}
        run: |
          if [ -z "$FIREBASE_SECRET" ]; then
            echo "❌ FIREBASE_SERVICE_ACCOUNT_LECCE_DIGITAL_LEGENDS secret not configured"
            echo ""
            echo "🔧 To fix this:"
            echo "1. Go to Firebase Console: https://console.firebase.google.com/project/lecce-digital-game/settings/serviceaccounts/adminsdk"
            echo "2. Generate new private key and download JSON"
            echo "3. Add secret to GitHub: https://github.com/digital-community-le/lecce-digital-game/settings/secrets/actions"
            echo "4. Secret name: FIREBASE_SERVICE_ACCOUNT_LECCE_DIGITAL_LEGENDS"
            echo "5. Secret value: [entire JSON file content]"
            exit 1
          else
            echo "✅ Firebase service account secret is configured"
          fi

      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_LECCE_DIGITAL_LEGENDS }}
          channelId: live
          projectId: lecce-digital-game

      - name: Get version info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION=$(node -p "require('./package.json').version")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Notify deployment success
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.version.outputs.version }}';
            const eventType = '${{ github.event_name }}';
            const timestamp = new Date().toISOString();

            console.log(`🚀 Deployment completed for version ${version}`);
            console.log(`📅 Deployed at: ${timestamp}`);
            console.log(`🔄 Triggered by: ${eventType}`);

            // Se è stato triggerato da PR, prova a commentare sulla PR
            if (eventType === 'pull_request') {
              try {
                const pr = context.payload.pull_request;
                const mergedBy = pr.merged_by ? pr.merged_by.login : 'unknown';
                const isAutoMerge = mergedBy === 'github-actions[bot]' || 
                                   mergedBy === pr.user.login;
                const mergeType = isAutoMerge ? 'automatically' : `manually by @${mergedBy}`;
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: `🚀 **Deployment completed!**
                  
                  ✅ Version \`${version}\` deployed successfully to production
                  📅 Deployed at: \`${timestamp}\`
                  🌐 Live URL: https://lecce-digital-game.web.app
                  
                  **What happened:**
                  1. ✅ Release PR merged ${mergeType}
                  2. ✅ Production build completed  
                  3. ✅ Firebase hosting deployment successful
                  4. ✅ Application is now live
                  
                  **Merge details:**
                  - 👤 Merged by: ${mergedBy}
                  - 🤖 Method: ${isAutoMerge ? 'Auto-merge' : 'Manual merge'}
                  - 📅 Merged at: ${pr.merged_at}`
                });
                console.log(`✅ Success notification posted to PR #${context.payload.pull_request.number}`);
              } catch (error) {
                console.log(`⚠️ Could not post comment to PR: ${error.message}`);
                console.log(`ℹ️ This is likely due to permissions. Deployment was successful anyway.`);
                // Non fallire il workflow per un errore di commento
              }
            }

            // Crea una release note se non esiste (per trigger da tag)
            if (eventType === 'push') {
              try {
                await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: version,
                  name: `Release ${version}`,
                  body: `🚀 **Automated Release ${version}**
                  
                  📅 Released at: ${timestamp}
                  🌐 Live URL: https://lecce-digital-game.web.app
                  
                  This release was automatically created and deployed.`,
                  draft: false,
                  prerelease: version.includes('-')
                });
                console.log(`📝 Release notes created for ${version}`);
              } catch (error) {
                console.log(`ℹ️ Release ${version} already exists or couldn't be created:`, error.message);
              }
            }

      - name: Notify deployment failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.version.outputs.version }}';
            const eventType = '${{ github.event_name }}';

            console.log(`❌ Deployment failed for version ${version}`);

            // Se è stato triggerato da PR, prova a commentare sulla PR
            if (eventType === 'pull_request') {
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: `❌ **Deployment failed!**
                  
                  Version \`${version}\` deployment to production failed.
                  
                  **Next steps:**
                  1. Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details
                  2. Fix any issues and manually redeploy if needed
                  3. Consider creating a hotfix if critical`
                });
                console.log(`✅ Failure notification posted to PR #${context.payload.pull_request.number}`);
              } catch (error) {
                console.log(`⚠️ Could not post comment to PR: ${error.message}`);
                console.log(`ℹ️ This is likely due to permissions. Check GitHub repository settings.`);
                // Non fallire il workflow per un errore di commento
              }
            } else {
              console.log(`ℹ️ Deployment failed for ${eventType} trigger - no PR to comment on`);
            }
