name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write
  statuses: write

jobs:
  # Pre-validation veloce per commit che potrebbero creare release
  pre-validation:
    if: |
      contains(github.event.head_commit.message, 'feat:') || 
      contains(github.event.head_commit.message, 'fix:') || 
      contains(github.event.head_commit.message, 'BREAKING CHANGE:')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Quick validation before release
        run: |
          npm run check
          npm run test:smart

  release-please:
    needs: [pre-validation]
    # Esegue sempre, ma ha info su pre-validation
    if: always()
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      pr_created: ${{ steps.release.outputs.pr_created }}
      pr_number: ${{ steps.release.outputs.pr_number }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      pre_validation_passed: ${{ needs.pre-validation.result == 'success' || needs.pre-validation.result == 'skipped' }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: node
          package-name: lecce-digital-game
          token: ${{ secrets.GITHUB_TOKEN }}

  # Nuovo job: Auto-merge della PR di release
  auto-merge-release:
    needs: [release-please]
    if: |
      needs.release-please.outputs.pr_created == 'true' &&
      needs.release-please.outputs.pre_validation_passed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-approve release PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.release-please.outputs.pr_number }}
            });

            // Approva la PR
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.release-please.outputs.pr_number }},
              event: 'APPROVE',
              body: '🤖 Auto-approved by Release Please workflow'
            });

            console.log(`✅ PR #${pr.number} approved automatically`);

      - name: Auto-merge release PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Attendi un momento per assicurarsi che l'approval sia processato
            await new Promise(resolve => setTimeout(resolve, 2000));

            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ needs.release-please.outputs.pr_number }},
                merge_method: 'squash',
                commit_title: `🚀 Release: Auto-merge PR #${{ needs.release-please.outputs.pr_number }}`,
                commit_message: 'Automatically merged by Release Please workflow'
              });

              console.log(`✅ PR #${{ needs.release-please.outputs.pr_number }} merged automatically`);
            } catch (error) {
              console.error('❌ Failed to auto-merge:', error.message);
              core.setFailed(`Auto-merge failed: ${error.message}`);
            }

  # Deploy su release - ora triggerato automaticamente dopo auto-merge
  deploy:
    needs: [release-please]
    if: needs.release-please.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Importante: fetch the latest after auto-merge
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check prerequisites
        run: npm run check:prerequisites

      - name: Run type checking
        run: npm run check

      - name: Run complete test suite (ALL tests for production deploy)
        run: npm run test:run

      - name: Generate comprehensive coverage report
        run: npm run test:coverage

      - name: Build application with version
        run: npm run build:prod

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_LECCE_DIGITAL_LEGENDS }}'
          channelId: live
          projectId: lecce-digital-legends

      - name: Create deployment comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ needs.release-please.outputs.tag_name }}';
            const deployUrl = 'https://lecce-digital-legends.web.app';

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `🚀 **Release ${tag} Deployed Successfully!**
              
              📦 **Live Application**: [${deployUrl}](${deployUrl})
              🏷️ **Release Tag**: \`${tag}\`
              ⏰ **Deployed At**: ${new Date().toISOString()}
              
              🎉 Release is now live and available to users!`
            });

  # Job di fallback se pre-validation fallisce ma PR è creata
  release-rollback:
    needs: [release-please]
    if: |
      needs.release-please.outputs.pr_created == 'true' &&
      needs.release-please.outputs.pre_validation_passed == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Notify failed pre-validation
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ needs.release-please.outputs.pr_number }};

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `⚠️ **Auto-merge Blocked**
              
              Pre-validation tests failed for this release PR.
              
              **Action Required:**
              1. 🔍 Check the pre-validation job logs
              2. 🛠️ Fix any failing tests
              3. 📝 Push fixes to trigger re-validation
              4. ✅ Manual review and merge when ready
              
              This PR will **NOT** be auto-merged until pre-validation passes.`
            });

            core.setFailed('Pre-validation failed - auto-merge blocked');
